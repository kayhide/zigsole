// Generated by CoffeeScript 1.3.3
(function() {
  var StandardGridCutter,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  StandardGridCutter = (function(_super) {

    __extends(StandardGridCutter, _super);

    function StandardGridCutter() {
      return StandardGridCutter.__super__.constructor.apply(this, arguments);
    }

    StandardGridCutter.prototype.create_curve = function(he, parity) {
      var mtx, points, pt0, pt1, v1, v2;
      if (parity == null) {
        parity = 1;
      }
      pt0 = he.point;
      pt1 = he.next.point;
      v1 = pt1.subtract(pt0).scale(0.5);
      mtx = new Matrix2D();
      mtx.rotate(parity * Math.PI * 2 / 3);
      v2 = v1.apply(mtx);
      points = [];
      points.push(pt0);
      if (he.mate.loop != null) {
        points.push(pt0.add(v1.scale(0.2)));
        points.push(pt0.add(v1));
        points.push(pt0.add(v1).add(v2.scale(0.5)));
        points.push(pt0.add(v1).add(v2));
        points.push(pt0.add(v1.scale(2)).add(v2));
        points.push(pt0.add(v1.scale(1.5)).add(v2.scale(0.5)));
        points.push(pt0.add(v1));
        points.push(pt0.add(v1.scale(1.8)));
        points.push(pt1);
      } else {
        points.push(null);
        points.push(null);
        points.push(pt1);
      }
      return points;
    };

    return StandardGridCutter;

  })(GridCutter);

  this.StandardGridCutter = StandardGridCutter;

}).call(this);
