// Generated by CoffeeScript 1.3.3
(function() {
  var RotateCommand,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RotateCommand = (function(_super) {

    __extends(RotateCommand, _super);

    function RotateCommand(piece, center, degree) {
      this.piece = piece;
      this.center = center;
      this.degree = degree;
    }

    RotateCommand.prototype.execute = function() {
      var local_center, mtx, pos, vec;
      mtx = new Matrix2D();
      mtx.rotate(Math.PI * this.degree / 180);
      local_center = new Point(this.center.x - this.piece.shape.x, this.center.y - this.piece.shape.y);
      pos = local_center.apply(mtx);
      vec = pos.subtract(local_center);
      this.piece.shape.rotation += this.degree;
      this.piece.shape.x -= vec.x;
      return this.piece.shape.y -= vec.y;
    };

    RotateCommand.prototype.squash = function(cmd) {
      if (cmd instanceof RotateCommand && cmd.piece === this.piece && cmd.center === this.center) {
        this.degree += cmd.degree;
        return true;
      } else {
        return false;
      }
    };

    RotateCommand.prototype.isTransformCommand = function() {
      return true;
    };

    return RotateCommand;

  })(Command);

  this.RotateCommand = RotateCommand;

}).call(this);
