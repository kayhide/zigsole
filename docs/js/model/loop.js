// Generated by CoffeeScript 1.12.7
(function() {
  var Loop;

  Loop = (function() {
    Loop.create = function(count) {
      var he, head, i, j, next, ref;
      if (count == null) {
        count = 1;
      }
      head = HalfEdge.create();
      he = head;
      for (i = j = 1, ref = count; 1 <= ref ? j < ref : j > ref; i = 1 <= ref ? ++j : --j) {
        next = HalfEdge.create();
        he.setNext(next);
        he = next;
      }
      he.setNext(head);
      return new Loop(head);
    };

    function Loop(edge) {
      var he, j, len, ref;
      this.edge = edge;
      ref = this.getEdges();
      for (j = 0, len = ref.length; j < len; j++) {
        he = ref[j];
        he.loop = this;
      }
    }

    Loop.prototype.getEdges = function() {
      var edges, he;
      edges = [this.edge];
      he = this.edge.next;
      while (he !== this.edge) {
        edges.push(he);
        he = he.next;
      }
      return edges;
    };

    Loop.prototype.getCurve = function() {
      var curves, he;
      curves = (function() {
        var j, len, ref, results;
        ref = this.getEdges();
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          he = ref[j];
          results.push(he.curve);
        }
        return results;
      }).call(this);
      return this.connectCurves(curves);
    };

    Loop.prototype.connectCurves = function(curves) {
      var j, k, len, len1, points, pt, pts, ref;
      points = [];
      points.push(curves[0][0]);
      for (j = 0, len = curves.length; j < len; j++) {
        pts = curves[j];
        ref = pts.slice(1);
        for (k = 0, len1 = ref.length; k < len1; k++) {
          pt = ref[k];
          points.push(pt);
        }
      }
      return points;
    };

    return Loop;

  })();

  this.Loop = Loop;

}).call(this);
