// Generated by CoffeeScript 1.12.7
(function() {
  var TransformCommand,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TransformCommand = (function(superClass) {
    extend(TransformCommand, superClass);

    function TransformCommand() {
      return TransformCommand.__super__.constructor.apply(this, arguments);
    }

    TransformCommand.prototype.execute = function() {
      return this.piece.position(this.position).rotation(this.rotation);
    };

    return TransformCommand;

  })(Command);

  this.TransformCommand = TransformCommand;

}).call(this);
