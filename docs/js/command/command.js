// Generated by CoffeeScript 1.12.7
(function() {
  var Command;

  Command = (function() {
    function Command() {}

    Command.onCommit = [];

    Command.onPost = [];

    Command.onReject = [];

    Command.commands = [];

    Command.current_commands = [];

    Command.commit = function() {
      var cmds, fnc, i, len, ref;
      cmds = this.squash();
      this.commands.concat(cmds);
      ref = this.onCommit;
      for (i = 0, len = ref.length; i < len; i++) {
        fnc = ref[i];
        fnc(cmds);
      }
      return cmds;
    };

    Command.post = function(cmd) {
      var fnc, i, j, len, len1, ref, ref1;
      if (cmd.isValid()) {
        cmd.execute();
        this.current_commands.push(cmd);
        ref = this.onPost;
        for (i = 0, len = ref.length; i < len; i++) {
          fnc = ref[i];
          fnc(cmd);
        }
      } else {
        cmd.rejected = true;
        ref1 = this.onReject;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          fnc = ref1[j];
          fnc(cmd);
        }
      }
      return cmd;
    };

    Command.squash = function() {
      var cmd, cmds, last;
      cmds = [];
      last = null;
      while (cmd = this.current_commands.shift()) {
        if (!(last != null ? last.squash(cmd) : void 0)) {
          last = cmd;
          cmds.push(cmd);
        }
      }
      return cmds;
    };

    Command.prototype.post = function() {
      return Command.post(this);
    };

    Command.prototype.commit = function() {
      Command.post(this);
      Command.commit();
      return this;
    };

    Command.prototype.squash = function(cmd) {
      return false;
    };

    Command.prototype.isValid = function() {
      return true;
    };

    return Command;

  })();

  this.Command = Command;

}).call(this);
